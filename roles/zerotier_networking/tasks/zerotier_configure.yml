---
#- name: Install Zerotier-One
#  command: curl -s https://install.zerotier.com | sudo bash

- name: Install pathlib
  pip:
    name: pathlib


- name: Get ZT secret local auth token
  zt_get_auth_token:
  register: zt_local_secret
  
# set fact get_node_id
- name: Get ZT node ID
  zt_get_node_id:
    token: "{{ zt_local_secret.data }}"
  register: zt_node_id

- name: print var for debugging purposes
  ansible.builtin.debug:
    msg: " {{ zt_node_id.data.address }} "

- name: Zerotier Join Network
  command: zerotier-cli join {{ zt_network_id }}
  # skip this if already existing config file
  args:
    creates: /var/lib/zerotier-one/networks.d/{{ zt_network_id }}.conf
  register: join_output
    

- name: Authorize Zerotier Node
  zt_authorize:
    token: "{{ zt_token }}"
    zt_network_id: "{{ zt_network_id }}"
    zt_node_id: "{{ zt_node_id.data.address }}"
    authorize: True
    hostname: "{{ ansible_hostname }}"
  register: auth_result

- name: Zerotier Set IP 
  zt_set_ip:
    token: "{{ zt_token }}"
    zt_network_id: "{{ zt_network_id }}"
    zt_node_id: "{{ zt_node_id.data.address }}"
    ip_address: "{{ zt_ip }}"
  register: auth_result

- name: Zerotier Set Name 
  zt_set_name:
    token: "{{ zt_token }}"
    zt_network_id: "{{ zt_network_id }}"
    zt_node_id: "{{ zt_node_id.data.address }}"
    zt_name: "{{ ansible_hostname }}"
  register: auth_result

- name: Zerotier Set Description 
  zt_set_description:
    token: "{{ zt_token }}"
    zt_network_id: "{{ zt_network_id }}"
    zt_node_id: "{{ zt_node_id.data.address }}"
    zt_description: "{{ ansible_hostname }}"
  register: auth_result

  - name: Zerotier Advertise Networks 
  zt_set_networks:
    token: "{{ zt_token }}"
    zt_network_id: "{{ zt_network_id }}"
    zt_node_id: "{{ zt_node_id.data.address }}"
    zt_networks: "{{ zt.networks }}"
  register: auth_result

- name: print var for debugging purposes
  ansible.builtin.debug:
    msg: " {{ auth_result.data }} "

- name: print var for debugging purposes
  ansible.builtin.debug:
    msg: " {{ join_output.stdout }} "

  #failed_when:
  #  - result.rc == 0
  #  - '"An intervention is being carried out on this server" not in result.stdout'