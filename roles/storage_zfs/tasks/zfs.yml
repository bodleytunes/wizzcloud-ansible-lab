# install zfsutils-linux
- name: Install useful zfs packages
  apt:
    update_cache: true
    pkg:
    - zfsutils-linux 

# modprobe zfs kernel module
- name: zfs
  community.general.modprobe:
    name: zfs
    state: present

# unmount - get drive list
- name: unmount
  parted:
    device: "{{ item }}"
    unit: MiB
  register: info
  loop: "{{ storage.zfs.zpools[0].disks }}"
  ignore_errors: true

# unmount - unmount drives
- name: debug stuff
  debug:
    msg: "{{ item.0.disk.dev }} {{ item.1.num }}"
  loop: "{{ info.results | subelements('partitions') }}"

# unmount current drives
- name: wipe current drives
  command: "umount {{ item }}"
  loop: "{{ storage.zfs.zpools[1].disks }}"
  ignore_errors: true

# unmount - get drive list
- name: unmount
  parted:
    device: "{{ item }}"
    unit: MiB
  register: info
  loop: "{{ storage.zfs.zpools[1].disks }}"
  ignore_errors: true

# unmount - unmount drives
- name: debug stuff
  debug:
    msg: "{{ item.0.disk.dev }} {{ item.1.num }}"
  loop: "{{ info.results | subelements('partitions') }}"
  ignore_errors: true

# unmount current drives
- name: wipe current drives
  command: "umount {{ item }}"
  loop: "{{ storage.zfs.zpools[1].disks }}"
  ignore_errors: true


# warning this will wipe your current pools!

- name: Create zpools - OVH
  command: zpool create {{ item.name }}  {{ item.disks[0] }}  -f
  loop: '{{ storage.zfs.zpools }}'
  loop_control:
    index_var: i
  when: "'baremetal_hosts' in group_names"
  ignore_errors: true



- name: Create ZFS Datasets - zpool1
  community.general.zfs:
    name: "{{ item.value }}"
    state: present
  #with_items: "{{ storage.zfs.zpools[0].datasets | dictsort }}"
  with_items: "{{ group_storage.zfs.zpools[0].datasets | dict2items }}"
  ignore_errors: true

- name: Create ZFS Datasets - zpool2
  community.general.zfs:
    name: "{{ item.value }}"
    state: present
  #with_items: "{{ storage.zfs.zpools[0].datasets | dictsort }}"
  with_items: "{{ group_storage.zfs.zpools[1].datasets | dict2items }}"
  ignore_errors: true